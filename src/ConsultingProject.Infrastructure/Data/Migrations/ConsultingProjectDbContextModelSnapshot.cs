// <auto-generated />
using System;
using ConsultingProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsultingProject.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ConsultingProjectDbContext))]
    partial class ConsultingProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ConsultingProject.Core.Domain.Actividades", b =>
                {
                    b.Property<string>("IdActividad")
                        .HasColumnName("Id_actividad")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("DescripcionActividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Descripcion_actividad")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("IdEtapa")
                        .IsRequired()
                        .HasColumnName("Id_etapa")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdProfesional")
                        .IsRequired()
                        .HasColumnName("Id_profesional")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdProyecto")
                        .IsRequired()
                        .HasColumnName("Id_proyecto")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("NombreActividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nombre_actividad")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdActividad")
                        .HasName("PRIMARY");

                    b.HasIndex("IdEtapa")
                        .HasName("Id_etapa");

                    b.HasIndex("IdProfesional")
                        .HasName("Id_profesional");

                    b.HasIndex("IdProyecto")
                        .HasName("Id_proyecto");

                    b.ToTable("actividades");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Cargos", b =>
                {
                    b.Property<string>("IdCargo")
                        .HasColumnName("Id_cargo")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(30);

                    b.HasKey("IdCargo")
                        .HasName("PRIMARY");

                    b.ToTable("cargos");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.ContactoEmpresa", b =>
                {
                    b.Property<string>("IdContactoEmpresa")
                        .HasColumnName("Id_Contacto_empresa")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("ApellidosContactoEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Apellidos_Contacto_empresa")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("Correo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("NombresContactoEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombres_Contacto_empresa")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("Telefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(10);

                    b.HasKey("IdContactoEmpresa")
                        .HasName("PRIMARY");

                    b.ToTable("contacto_empresa");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Departamento", b =>
                {
                    b.Property<int>("CódigoDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Código_Departamento")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombre_Departamento")
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(25);

                    b.HasKey("CódigoDepartamento")
                        .HasName("PRIMARY");

                    b.ToTable("departamento");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.EjeSeleccionado", b =>
                {
                    b.Property<string>("IdEje")
                        .HasColumnName("Id_eje")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Eje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(25);

                    b.Property<string>("IdProyecto")
                        .IsRequired()
                        .HasColumnName("Id_proyecto")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.HasKey("IdEje")
                        .HasName("PRIMARY");

                    b.HasIndex("IdProyecto")
                        .HasName("Id_proyecto");

                    b.ToTable("eje_seleccionado");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_empresa")
                        .HasColumnType("int(11)");

                    b.Property<int>("CódigoDepartamento")
                        .HasColumnName("Código_Departamento")
                        .HasColumnType("int(11)");

                    b.Property<int>("CódigoMunicipio")
                        .HasColumnName("Código_Municipio")
                        .HasColumnType("int(11)");

                    b.Property<int?>("DigitoVerificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Digito_verificacion")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("Fechaconstlegal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("IdEje")
                        .IsRequired()
                        .HasColumnName("Id_eje")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdProfesional")
                        .IsRequired()
                        .HasColumnName("Id_profesional")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdProyecto")
                        .IsRequired()
                        .HasColumnName("Id_proyecto")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("IdSector")
                        .IsRequired()
                        .HasColumnName("Id_sector")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("IdTamañoEmpresa")
                        .IsRequired()
                        .HasColumnName("Id_Tamaño_empresa")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<int?>("Nit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NIT")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("NombreEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombre_empresa")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(15);

                    b.HasKey("IdEmpresa")
                        .HasName("PRIMARY");

                    b.HasIndex("CódigoDepartamento")
                        .HasName("Código_Departamento");

                    b.HasIndex("CódigoMunicipio")
                        .HasName("Código_Municipio");

                    b.HasIndex("IdEje")
                        .HasName("Id_eje");

                    b.HasIndex("IdProfesional")
                        .HasName("Id_profesional");

                    b.HasIndex("IdProyecto")
                        .HasName("Id_proyecto");

                    b.HasIndex("IdSector")
                        .HasName("Id_sector");

                    b.HasIndex("IdTamañoEmpresa")
                        .HasName("Id_Tamaño_empresa");

                    b.ToTable("empresa");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Estudios", b =>
                {
                    b.Property<string>("IdEstudio")
                        .HasColumnName("Id_estudio")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Estudio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.HasKey("IdEstudio")
                        .HasName("PRIMARY");

                    b.ToTable("estudios");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Etapas", b =>
                {
                    b.Property<string>("IdEtapa")
                        .HasColumnName("Id_etapa")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("DescripcionEtapa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Descripcion_etapa")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("IdProyecto")
                        .IsRequired()
                        .HasColumnName("Id_proyecto")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("NombreEtapa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombre_etapa")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(15);

                    b.HasKey("IdEtapa")
                        .HasName("PRIMARY");

                    b.HasIndex("IdProyecto")
                        .HasName("Id_proyecto");

                    b.ToTable("etapas");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Herramientas", b =>
                {
                    b.Property<string>("IdHerramienta")
                        .HasColumnName("Id_herramienta")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Herramienta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("IdEje")
                        .IsRequired()
                        .HasColumnName("Id_eje")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.HasKey("IdHerramienta")
                        .HasName("PRIMARY");

                    b.HasIndex("IdEje")
                        .HasName("Id_eje");

                    b.ToTable("herramientas");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Municipio", b =>
                {
                    b.Property<int>("CódigoMunicipio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Código_Municipio")
                        .HasColumnType("int(11)");

                    b.Property<int>("CódigoDepartamento")
                        .HasColumnName("Código_Departamento")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreMunicipio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombre_Municipio")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.HasKey("CódigoMunicipio")
                        .HasName("PRIMARY");

                    b.HasIndex("CódigoDepartamento")
                        .HasName("Código_Departamento");

                    b.ToTable("municipio");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Profesional", b =>
                {
                    b.Property<string>("IdProfesional")
                        .HasColumnName("Id_profesional")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Apellidos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("Correo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("IdCargo")
                        .IsRequired()
                        .HasColumnName("Id_cargo")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("IdEje")
                        .IsRequired()
                        .HasColumnName("Id_eje")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdEstudio")
                        .IsRequired()
                        .HasColumnName("Id_estudio")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdProfesion")
                        .IsRequired()
                        .HasColumnName("Id_Profesion")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdProyecto")
                        .IsRequired()
                        .HasColumnName("Id_proyecto")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnName("Id_Tipo_Documento")
                        .HasColumnType("int(11)");

                    b.Property<int>("NoDocumento")
                        .HasColumnName("No_documento")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nombres")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("Telefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(10);

                    b.HasKey("IdProfesional")
                        .HasName("PRIMARY");

                    b.HasIndex("IdCargo")
                        .HasName("Id_cargo");

                    b.HasIndex("IdEje")
                        .HasName("Id_eje");

                    b.HasIndex("IdEstudio")
                        .HasName("Id_estudio");

                    b.HasIndex("IdProfesion")
                        .HasName("Id_Profesion");

                    b.HasIndex("IdProyecto")
                        .HasName("Id_proyecto");

                    b.HasIndex("IdTipoDocumento")
                        .HasName("Id_Tipo_Documento");

                    b.HasIndex("NoDocumento")
                        .IsUnique()
                        .HasName("No_documento");

                    b.ToTable("profesional");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Profesiones", b =>
                {
                    b.Property<string>("IdProfesion")
                        .HasColumnName("Id_Profesion")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Profesion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(30);

                    b.HasKey("IdProfesion")
                        .HasName("PRIMARY");

                    b.ToTable("profesiones");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Proyecto", b =>
                {
                    b.Property<string>("IdProyecto")
                        .HasColumnName("Id_proyecto")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("FechaInicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Fecha_inicio")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("NoConvenio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("No_Convenio")
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(10);

                    b.Property<string>("NombreProyecto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombre_proyecto")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(15);

                    b.Property<string>("Objeto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("PlazoEjecucion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Plazo_Ejecucion")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Presupuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdProyecto")
                        .HasName("PRIMARY");

                    b.ToTable("proyecto");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.RepresentanteLegal", b =>
                {
                    b.Property<string>("IdReprLegal")
                        .HasColumnName("Id_repr_legal")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("ApellidosRepresentanteLegal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Apellidos_Representante_Legal")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("Correo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_empresa")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnName("Id_Tipo_Documento")
                        .HasColumnType("int(11)");

                    b.Property<int>("NoDocumento")
                        .HasColumnName("No_documento")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombresRepresentanteLegal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombres_Representante_Legal")
                        .HasColumnType("varchar(40)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(40);

                    b.Property<string>("Telefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(10);

                    b.HasKey("IdReprLegal")
                        .HasName("PRIMARY");

                    b.HasIndex("IdEmpresa")
                        .HasName("Id_empresa");

                    b.HasIndex("IdTipoDocumento")
                        .HasName("Id_Tipo_Documento");

                    b.HasIndex("NoDocumento")
                        .IsUnique()
                        .HasName("No_documento");

                    b.ToTable("representante_legal");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Rol", b =>
                {
                    b.Property<string>("IdRol")
                        .HasColumnName("Id_rol")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("DescripciónRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Descripción_Rol")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("NombreRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Nombre_Rol")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(15);

                    b.HasKey("IdRol")
                        .HasName("PRIMARY");

                    b.ToTable("rol");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Sector", b =>
                {
                    b.Property<string>("IdSector")
                        .HasColumnName("Id_sector")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Sector1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sector")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(50);

                    b.HasKey("IdSector")
                        .HasName("PRIMARY");

                    b.ToTable("sector");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.TamañoEmpresa", b =>
                {
                    b.Property<string>("IdTamañoEmpresa")
                        .HasColumnName("Id_Tamaño_empresa")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("TamañoEmpresa1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Tamaño_empresa")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(15);

                    b.HasKey("IdTamañoEmpresa")
                        .HasName("PRIMARY");

                    b.ToTable("tamaño_empresa");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.TipoDocumento", b =>
                {
                    b.Property<int>("IdTipoDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Tipo_Documento")
                        .HasColumnType("int(11)");

                    b.Property<string>("TipoDeDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Tipo_de_documento")
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(25);

                    b.HasKey("IdTipoDocumento")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_documento");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasColumnName("Id_Usuario")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Contraseña")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(8)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(8);

                    b.Property<string>("IdProfesional")
                        .IsRequired()
                        .HasColumnName("Id_profesional")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("IdRol")
                        .IsRequired()
                        .HasColumnName("Id_rol")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("NoDocumento")
                        .IsRequired()
                        .HasColumnName("No_documento")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11);

                    b.HasKey("IdUsuario")
                        .HasName("PRIMARY");

                    b.HasIndex("IdProfesional")
                        .HasName("Id_profesional");

                    b.HasIndex("IdRol")
                        .HasName("Id_rol");

                    b.HasIndex("NoDocumento")
                        .IsUnique()
                        .HasName("No_documento");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Actividades", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Etapas", "IdEtapaNavigation")
                        .WithMany("Actividades")
                        .HasForeignKey("IdEtapa")
                        .HasConstraintName("actividades_ibfk_1")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Profesional", "IdProfesionalNavigation")
                        .WithMany("Actividades")
                        .HasForeignKey("IdProfesional")
                        .HasConstraintName("actividades_ibfk_3")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Proyecto", "IdProyectoNavigation")
                        .WithMany("Actividades")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("actividades_ibfk_2")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.EjeSeleccionado", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Proyecto", "IdProyectoNavigation")
                        .WithMany("EjeSeleccionado")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("eje_seleccionado_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Empresa", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Departamento", "CódigoDepartamentoNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("CódigoDepartamento")
                        .HasConstraintName("empresa_ibfk_1")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Municipio", "CódigoMunicipioNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("CódigoMunicipio")
                        .HasConstraintName("empresa_ibfk_2")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.EjeSeleccionado", "IdEjeNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("IdEje")
                        .HasConstraintName("empresa_ibfk_5")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Profesional", "IdProfesionalNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("IdProfesional")
                        .HasConstraintName("empresa_ibfk_7")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Proyecto", "IdProyectoNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("empresa_ibfk_6")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Sector", "IdSectorNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("empresa_ibfk_3")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.TamañoEmpresa", "IdTamañoEmpresaNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("IdTamañoEmpresa")
                        .HasConstraintName("empresa_ibfk_4")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Etapas", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Proyecto", "IdProyectoNavigation")
                        .WithMany("Etapas")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("etapas_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Herramientas", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.EjeSeleccionado", "IdEjeNavigation")
                        .WithMany("Herramientas")
                        .HasForeignKey("IdEje")
                        .HasConstraintName("herramientas_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Municipio", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Departamento", "CódigoDepartamentoNavigation")
                        .WithMany("Municipio")
                        .HasForeignKey("CódigoDepartamento")
                        .HasConstraintName("municipio_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Profesional", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Cargos", "IdCargoNavigation")
                        .WithMany("Profesional")
                        .HasForeignKey("IdCargo")
                        .HasConstraintName("profesional_ibfk_4")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.EjeSeleccionado", "IdEjeNavigation")
                        .WithMany("Profesional")
                        .HasForeignKey("IdEje")
                        .HasConstraintName("profesional_ibfk_6")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Estudios", "IdEstudioNavigation")
                        .WithMany("Profesional")
                        .HasForeignKey("IdEstudio")
                        .HasConstraintName("profesional_ibfk_3")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Profesiones", "IdProfesionNavigation")
                        .WithMany("Profesional")
                        .HasForeignKey("IdProfesion")
                        .HasConstraintName("profesional_ibfk_2")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Proyecto", "IdProyectoNavigation")
                        .WithMany("Profesional")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("profesional_ibfk_5")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.TipoDocumento", "IdTipoDocumentoNavigation")
                        .WithMany("Profesional")
                        .HasForeignKey("IdTipoDocumento")
                        .HasConstraintName("profesional_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.RepresentanteLegal", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Empresa", "IdEmpresaNavigation")
                        .WithMany("RepresentanteLegal")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("representante_legal_ibfk_2")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.TipoDocumento", "IdTipoDocumentoNavigation")
                        .WithMany("RepresentanteLegal")
                        .HasForeignKey("IdTipoDocumento")
                        .HasConstraintName("representante_legal_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingProject.Core.Domain.Usuario", b =>
                {
                    b.HasOne("ConsultingProject.Core.Domain.Profesional", "IdProfesionalNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdProfesional")
                        .HasConstraintName("usuario_ibfk_1")
                        .IsRequired();

                    b.HasOne("ConsultingProject.Core.Domain.Rol", "IdRolNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("usuario_ibfk_2")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
